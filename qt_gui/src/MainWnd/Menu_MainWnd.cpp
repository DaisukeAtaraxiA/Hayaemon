//----------------------------------------------------------------------------
// Menu_MainWnd.cpp : メインウィンドウ用メニューの作成・管理を行う
//----------------------------------------------------------------------------
#include "Menu_MainWnd.h"
#include <cassert>
#include <QActionGroup>
#include "../Common/CommandList.h"
#include "../Common/Define.h"
#include "MainWnd.h"
//----------------------------------------------------------------------------
// 作成
//----------------------------------------------------------------------------
BOOL CMenu_MainWnd::Create()
{
	CreateConnections();
	CreateActionMap();
	CreateActionGroups();
	return TRUE;
}
//----------------------------------------------------------------------------
// ＡＢループの状態を設定
//----------------------------------------------------------------------------
void CMenu_MainWnd::SetABLoopState(BOOL bALoop, BOOL bBLoop)
{
	EnableItem(ID_SLOOP, !(bALoop || bBLoop) ? MFS_ENABLED : MFS_DISABLED);
	EnableItem(ID_ALOOP, !(bALoop || bBLoop) ? MFS_ENABLED : MFS_DISABLED);
	EnableItem(ID_RANDOM, !(bALoop || bBLoop) ? MFS_ENABLED : MFS_DISABLED);
	EnableItem(ID_MARKERPLAY, !(bALoop || bBLoop) ? MFS_ENABLED : 
		MFS_DISABLED);
	EnableItem(ID_ADDMARKER, !(bALoop || bBLoop) ? MFS_ENABLED : MFS_DISABLED);
	EnableItem(ID_DELETEMARKER, !(bALoop || bBLoop)
		? MFS_ENABLED : MFS_DISABLED);
	EnableItem(ID_ABLOOP_A_SETTING, bALoop ? MFS_ENABLED : MFS_DISABLED);
	EnableItem(ID_ABLOOP_B_SETTING, bBLoop ? MFS_ENABLED : MFS_DISABLED);
}
//----------------------------------------------------------------------------
// リバーブの設定
//----------------------------------------------------------------------------
void CMenu_MainWnd::SetReverb(float fInGain, float fReverbMix,
	float fReverbTime, float fHighFreqRTRatio, UINT uID)
{
	BOOL bReverb = !IsItemChecked(uID);
	m_rMainWnd.GetSound().SetReverb(fInGain, fReverbMix, fReverbTime,
									fHighFreqRTRatio, bReverb);
	m_rMainWnd.SetReverb(bReverb);
	UncheckReverbMenu();
	CheckItem(uID, bReverb ? MF_CHECKED : MF_UNCHECKED);
}
//----------------------------------------------------------------------------
// １曲ループの状態を設定
//----------------------------------------------------------------------------
void CMenu_MainWnd::SetSingleLoopState(BOOL bSLoop)
{
	CheckItem(ID_SLOOP, bSLoop ? MF_CHECKED : MF_UNCHECKED);
	EnableItem(ID_ALOOP, bSLoop ? MFS_DISABLED : MFS_ENABLED);
	EnableItem(ID_RANDOM, bSLoop ? MFS_DISABLED : MFS_ENABLED);
}
//----------------------------------------------------------------------------
// EQ の表示状態を切り替える
//----------------------------------------------------------------------------
void CMenu_MainWnd::SwitchEQVisible(UINT uID)
{
	CheckItem(uID, IsItemChecked(uID) ? MF_UNCHECKED : MF_CHECKED);
}
//----------------------------------------------------------------------------
// メニューのチェック状態を切り替える
//----------------------------------------------------------------------------
void CMenu_MainWnd::SwitchItemChecked(UINT uID)
{
	BOOL bCheck = !IsItemChecked(uID);
	CheckItem(uID, bCheck ? MF_CHECKED : MF_UNCHECKED);
}
//----------------------------------------------------------------------------
// リバーブメニューのチェックを外す
//----------------------------------------------------------------------------
void CMenu_MainWnd::UncheckReverbMenu()
{
	CheckItem(ID_REVERB_DEFAULT, MF_UNCHECKED);
	CheckItem(ID_REVERB_CUSTOMIZE, MF_UNCHECKED);
}
//----------------------------------------------------------------------------
// 効果音メニューのチェックを外す
//----------------------------------------------------------------------------
void CMenu_MainWnd::UncheckSoundEffectMenu()
{
	CheckItem(ID_RECORDNOISE, MF_UNCHECKED);
	CheckItem(ID_WAVE, MF_UNCHECKED);
}
//----------------------------------------------------------------------------
// 表示 → 再生速度メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSpeedMenuSelected(bool checked)
{
	m_rMainWnd.SetSpeedVisible(checked);
}
//----------------------------------------------------------------------------
// 表示 → 再生周波数メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnFreqMenuSelected(bool checked)
{
	m_rMainWnd.SetFreqVisible(checked);
}
//----------------------------------------------------------------------------
// 表示 → 音程メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnPitchMenuSelected(bool checked)
{
	m_rMainWnd.SetPitchVisible(checked);
}
//----------------------------------------------------------------------------
// 表示 → 音量メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnVolumeMenuSelected(bool checked)
{
	m_rMainWnd.SetVolumeVisible(checked);
}
//----------------------------------------------------------------------------
// 表示 → パンメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnPanMenuSelected(bool checked)
{
	m_rMainWnd.SetPanVisible(checked);
}
//----------------------------------------------------------------------------
// 表示 → グラフィックイコライザメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQMenuSelected(bool checked)
{
	m_rMainWnd.SetEQVisible(checked);
}
//----------------------------------------------------------------------------
// 再生 → 頭出しメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnHeadMenuSelected()
{
	m_rMainWnd.Head();
}
//----------------------------------------------------------------------------
// 再生 → 前へメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnPreviousMenuSelected()
{
	if(!m_rMainWnd.IsMarkerPlay())
		m_rMainWnd.PlayPrevious();
	else
		m_rMainWnd.SetPrevMarker();
}
//----------------------------------------------------------------------------
// 再生 → 次へメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnNextMenuSelected()
{
	if(!m_rMainWnd.IsMarkerPlay())
		m_rMainWnd.PlayNext(FALSE, FALSE);
	else
		m_rMainWnd.SetNextMarker();
}
//----------------------------------------------------------------------------
// 再生 → 一時停止メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnPauseMenuSelected()
{
	m_rMainWnd.Pause();
}
//----------------------------------------------------------------------------
// 再生 → 巻き戻しメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnRewindMenuSelected(bool checked)
{
	if(!checked) m_rMainWnd.StopRewind();
	else m_rMainWnd.StartRewind();
}
//----------------------------------------------------------------------------
// 再生 → 早送りメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnForwardMenuSelected(bool checked)
{
	if(!checked) m_rMainWnd.StopForward();
	else m_rMainWnd.StartForward();
}
//----------------------------------------------------------------------------
// 再生 → 1秒戻るメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnReturn1SecMenuSelected()
{
	m_rMainWnd.ReturnSeconds(1);
}
//----------------------------------------------------------------------------
// 再生 → 2秒戻るメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnReturn2SecMenuSelected()
{
	m_rMainWnd.ReturnSeconds(2);
}
//----------------------------------------------------------------------------
// 再生 → 3秒戻るメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnReturn3SecMenuSelected()
{
	m_rMainWnd.ReturnSeconds(3);
}
//----------------------------------------------------------------------------
// 再生 → 5秒戻るメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnReturn5SecMenuSelected()
{
	m_rMainWnd.ReturnSeconds(5);
}
//----------------------------------------------------------------------------
// 再生 → 10秒戻るメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnReturn10SecMenuSelected()
{
	m_rMainWnd.ReturnSeconds(10);
}
//----------------------------------------------------------------------------
// 再生 → 1秒進むメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnForward1SecMenuSelected()
{
	m_rMainWnd.ForwardSeconds(1);
}
//----------------------------------------------------------------------------
// 再生 → 2秒進むメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnForward2SecMenuSelected()
{
	m_rMainWnd.ForwardSeconds(2);
}
//----------------------------------------------------------------------------
// 再生 → 3秒進むメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnForward3SecMenuSelected()
{
	m_rMainWnd.ForwardSeconds(3);
}
//----------------------------------------------------------------------------
// 再生 → 5秒進むメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnForward5SecMenuSelected()
{
	m_rMainWnd.ForwardSeconds(5);
}
//----------------------------------------------------------------------------
// 再生 → 10秒進むメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnForward10SecMenuSelected()
{
	m_rMainWnd.ForwardSeconds(10);
}
//----------------------------------------------------------------------------
// 再生 → 停止メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnStopMenuSelected()
{
	m_rMainWnd.Stop(FALSE);
}
//----------------------------------------------------------------------------
// 再生 → １曲ループメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSingleLoopMenuSelected()
{
	m_rMainWnd.SetSingleLoop();
}
//----------------------------------------------------------------------------
// 再生 → 全曲ループメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnAllLoopMenuSelected(bool checked)
{
	m_rMainWnd.SetAllLoop(checked);
}
//----------------------------------------------------------------------------
// 再生 → ランダム再生メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnRandomMenuSelected(bool checked)
{
	m_rMainWnd.SetRandom(checked);
}
//----------------------------------------------------------------------------
// 再生 → 連続再生メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnContinueMenuSelected(bool checked)
{
	m_rMainWnd.SetContinue(checked);
}
//----------------------------------------------------------------------------
// 再生 → ＡＢループ（Ａ）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnABLoopAMenuSelected()
{
	m_rMainWnd.SetABLoopA();
}
//----------------------------------------------------------------------------
// 再生 → ＡＢループ（Ｂ）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnABLoopBMenuSelected()
{
	m_rMainWnd.SetABLoopB();
}
//----------------------------------------------------------------------------
// 再生 → ＡＢループ（Ａ）の位置設定メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnABLoopASettingMenuSelected()
{
	m_rMainWnd.SetABLoopASetting();
}
//----------------------------------------------------------------------------
// 再生 → ＡＢループ（Ｂ）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnABLoopBSettingMenuSelected()
{
	m_rMainWnd.SetABLoopBSetting();
}
//----------------------------------------------------------------------------
// 再生 → マーカー再生メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnMarkerPlayMenuSelected()
{
	m_rMainWnd.SetMarkerPlay();
}
//----------------------------------------------------------------------------
// 再生 → マーカー追加メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnAddMarkerMenuSelected()
{
	m_rMainWnd.AddMarker();
}
//----------------------------------------------------------------------------
// 再生 → マーカー削除メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDeleteMarkerMenuSelected()
{
	m_rMainWnd.DeleteMarker();
}
//----------------------------------------------------------------------------
// 再生 → 回数ループメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnCountLoopMenuSelected()
{
	m_rMainWnd.SetCountLoop();
}
//----------------------------------------------------------------------------
// 再生 → マーカー追加時にループメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnInstantLoopMenuSelected()
{
	m_rMainWnd.SetInstantLoop();
}
//----------------------------------------------------------------------------
// 再生 → マーカー位置変更時に再生位置変更メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPositionAutoMenuSelected()
{
	m_rMainWnd.SetPositionAuto();
}
//----------------------------------------------------------------------------
// 再生 → レコードノイズメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnRecordNoiseMenuSelected()
{
	BOOL bRecordNoise = IsItemChecked(ID_RECORDNOISE);
	m_rMainWnd.SetRecordNoise(bRecordNoise);
}
//----------------------------------------------------------------------------
// 再生 → 波音メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnWaveMenuSelected()
{
	BOOL bWave = IsItemChecked(ID_WAVE);
	m_rMainWnd.SetWave(bWave);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → デフォルトに戻すメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnResetSpeedMenuSelected()
{
	m_rMainWnd.ResetSpeed();
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 50%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed50MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(50.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 60%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed60MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(60.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 70%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed70MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(70.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 80%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed80MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(80.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 90%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed90MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(90.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 100%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed100MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(100.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 110%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed110MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(110.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 120%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed120MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(120.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 130%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed130MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(130.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 140%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed140MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(140.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 150%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed150MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(150.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 160%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed160MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(160.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 170%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed170MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(170.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 180%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed180MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(180.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 190%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed190MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(190.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 200%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed200MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(200.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 250%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed250MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(250.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 300%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed300MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(300.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 350%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed350MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(350.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 400%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeed400MenuSelected()
{
	m_rMainWnd.GetSpeedLabel().SetSpeed(400.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 0.1%下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown0_1SpeedMenuSelected()
{
	m_rMainWnd.DownSpeed(0.1);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 1%下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown1SpeedMenuSelected()
{
	m_rMainWnd.DownSpeed(1);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 2%下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown2SpeedMenuSelected()
{
	m_rMainWnd.DownSpeed(2);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 3%下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown3SpeedMenuSelected()
{
	m_rMainWnd.DownSpeed(3);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 5%下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown5SpeedMenuSelected()
{
	m_rMainWnd.DownSpeed(5);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 10%下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown10SpeedMenuSelected()
{
	m_rMainWnd.DownSpeed(10);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 0.1%上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp0_1SpeedMenuSelected()
{
	m_rMainWnd.UpSpeed(0.1);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 1%上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp1SpeedMenuSelected()
{
	m_rMainWnd.UpSpeed(1);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 2%上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp2SpeedMenuSelected()
{
	m_rMainWnd.UpSpeed(2);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 3%上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp3SpeedMenuSelected()
{
	m_rMainWnd.UpSpeed(3);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 5%上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp5SpeedMenuSelected()
{
	m_rMainWnd.UpSpeed(5);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 10%上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp10SpeedMenuSelected()
{
	m_rMainWnd.UpSpeed(10);
}
//----------------------------------------------------------------------------
// システム → 再生速度 → 小数点桁数 → 0桁メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeedDecimal0MenuSelected()
{
	CheckItem(ID_SPEEDDEC_0, MF_CHECKED);
	CheckItem(ID_SPEEDDEC_1, MF_UNCHECKED);
	CheckItem(ID_SPEEDDEC_2, MF_UNCHECKED);
	m_rMainWnd.GetSpeedLabel().SetDecimalDigit(0);
	m_rMainWnd.GetSpeedSlider().SetDecimalDigit(0);
}
//----------------------------------------------------------------------------
// システム → 再生速度 → 小数点桁数 → 1桁メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeedDecimal1MenuSelected()
{
	CheckItem(ID_SPEEDDEC_0, MF_UNCHECKED);
	CheckItem(ID_SPEEDDEC_1, MF_CHECKED);
	CheckItem(ID_SPEEDDEC_2, MF_UNCHECKED);
	m_rMainWnd.GetSpeedLabel().SetDecimalDigit(1);
	m_rMainWnd.GetSpeedSlider().SetDecimalDigit(1);
}
//----------------------------------------------------------------------------
// システム → 再生速度 → 小数点桁数 → 2桁メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetSpeedDecimal2MenuSelected()
{
	CheckItem(ID_SPEEDDEC_0, MF_UNCHECKED);
	CheckItem(ID_SPEEDDEC_1, MF_UNCHECKED);
	CheckItem(ID_SPEEDDEC_2, MF_CHECKED);
	m_rMainWnd.GetSpeedLabel().SetDecimalDigit(2);
	m_rMainWnd.GetSpeedSlider().SetDecimalDigit(2);
}
//----------------------------------------------------------------------------
// システム → 再生周波数 → 小数点桁数 → 0桁メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreqDecimal0MenuSelected()
{
	CheckItem(ID_FREQDEC_0, MF_CHECKED);
	CheckItem(ID_FREQDEC_1, MF_UNCHECKED);
	CheckItem(ID_FREQDEC_2, MF_UNCHECKED);
	m_rMainWnd.GetFreqLabel().SetDecimalDigit(0);
	m_rMainWnd.GetFreqSlider().SetDecimalDigit(0);
}
//----------------------------------------------------------------------------
// システム → 再生周波数 → 小数点桁数 → 1桁メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreqDecimal1MenuSelected()
{
	CheckItem(ID_FREQDEC_0, MF_UNCHECKED);
	CheckItem(ID_FREQDEC_1, MF_CHECKED);
	CheckItem(ID_FREQDEC_2, MF_UNCHECKED);
	m_rMainWnd.GetFreqLabel().SetDecimalDigit(1);
	m_rMainWnd.GetFreqSlider().SetDecimalDigit(1);
}
//----------------------------------------------------------------------------
// システム → 再生周波数 → 小数点桁数 → 2桁メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreqDecimal2MenuSelected()
{
	CheckItem(ID_FREQDEC_0, MF_UNCHECKED);
	CheckItem(ID_FREQDEC_1, MF_UNCHECKED);
	CheckItem(ID_FREQDEC_2, MF_CHECKED);
	m_rMainWnd.GetFreqLabel().SetDecimalDigit(2);
	m_rMainWnd.GetFreqSlider().SetDecimalDigit(2);
}
//----------------------------------------------------------------------------
// システム → 音程 → 小数点桁数 → 0桁メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchDecimal0MenuSelected()
{
	CheckItem(ID_PITCHDEC_0, MF_CHECKED);
	m_rMainWnd.GetPitchLabel().SetDecimalDigit(0);
}
//----------------------------------------------------------------------------
// システム → 音程 → 小数点桁数 → 1桁メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchDecimal1MenuSelected()
{
	CheckItem(ID_PITCHDEC_1, MF_CHECKED);
	m_rMainWnd.GetPitchLabel().SetDecimalDigit(1);
}
//----------------------------------------------------------------------------
// システム → 音程 → 小数点桁数 → 2桁メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchDecimal2MenuSelected()
{
	CheckItem(ID_PITCHDEC_2, MF_CHECKED);
	m_rMainWnd.GetPitchLabel().SetDecimalDigit(2);
}
//----------------------------------------------------------------------------
// エフェクト → 音量 → デフォルトに戻すメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnResetVolumeMenuSelected()
{
	m_rMainWnd.ResetVolume();
}
//----------------------------------------------------------------------------
// エフェクト → 音量 → 0%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetVolume0MenuSelected()
{
	m_rMainWnd.GetVolumeLabel().SetVolume(0.0);
}
//----------------------------------------------------------------------------
// エフェクト → 音量 → 10%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetVolume10MenuSelected()
{
	m_rMainWnd.GetVolumeLabel().SetVolume(10.0);
}
//----------------------------------------------------------------------------
// エフェクト → 音量 → 20%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetVolume20MenuSelected()
{
	m_rMainWnd.GetVolumeLabel().SetVolume(20.0);
}
//----------------------------------------------------------------------------
// エフェクト → 音量 → 30%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetVolume30MenuSelected()
{
	m_rMainWnd.GetVolumeLabel().SetVolume(30.0);
}
//----------------------------------------------------------------------------
// エフェクト → 音量 → 40%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetVolume40MenuSelected()
{
	m_rMainWnd.GetVolumeLabel().SetVolume(40.0);
}
//----------------------------------------------------------------------------
// エフェクト → 音量 → 50%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetVolume50MenuSelected()
{
	m_rMainWnd.GetVolumeLabel().SetVolume(50.0);
}
//----------------------------------------------------------------------------
// エフェクト → 音量 → 60%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetVolume60MenuSelected()
{
	m_rMainWnd.GetVolumeLabel().SetVolume(60.0);
}
//----------------------------------------------------------------------------
// エフェクト → 音量 → 70%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetVolume70MenuSelected()
{
	m_rMainWnd.GetVolumeLabel().SetVolume(70.0);
}
//----------------------------------------------------------------------------
// エフェクト → 音量 → 80%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetVolume80MenuSelected()
{
	m_rMainWnd.GetVolumeLabel().SetVolume(80.0);
}
//----------------------------------------------------------------------------
// エフェクト → 音量 → 90%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetVolume90MenuSelected()
{
	m_rMainWnd.GetVolumeLabel().SetVolume(90.0);
}
//----------------------------------------------------------------------------
// エフェクト → 音量 → 100%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetVolume100MenuSelected()
{
	m_rMainWnd.GetVolumeLabel().SetVolume(100.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生周波数 → デフォルトに戻すメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnResetFreqMenuSelected()
{
	m_rMainWnd.ResetFreq();
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 50%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq50MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(50.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 60%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq60MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(60.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 70%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq70MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(70.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 80%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq80MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(80.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 90%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq90MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(90.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 100%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq100MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(100.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 110%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq110MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(110.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 120%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq120MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(120.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 130%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq130MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(130.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 140%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq140MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(140.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 150%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq150MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(150.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 160%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq160MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(160.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 170%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq170MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(170.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 180%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq180MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(180.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 190%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq190MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(190.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 200%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq200MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(200.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 250%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq250MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(250.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 300%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq300MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(300.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 350%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq350MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(350.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生速度 → 設定 → 400%メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetFreq400MenuSelected()
{
	m_rMainWnd.GetFreqLabel().SetFreq(400.0);
}
//----------------------------------------------------------------------------
// 再生 → 再生周波数 → 0.1%下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown0_1FreqMenuSelected()
{
	m_rMainWnd.DownFreq(0.1);
}
//----------------------------------------------------------------------------
// 再生 → 再生周波数 → 1%下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown1FreqMenuSelected()
{
	m_rMainWnd.DownFreq(1);
}
//----------------------------------------------------------------------------
// 再生 → 再生周波数 → 2%下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown2FreqMenuSelected()
{
	m_rMainWnd.DownFreq(2);
}
//----------------------------------------------------------------------------
// 再生 → 再生周波数 → 3%下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown3FreqMenuSelected()
{
	m_rMainWnd.DownFreq(3);
}
//----------------------------------------------------------------------------
// 再生 → 再生周波数 → 5%下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown5FreqMenuSelected()
{
	m_rMainWnd.DownFreq(5);
}
//----------------------------------------------------------------------------
// 再生 → 再生周波数 → 10%下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown10FreqMenuSelected()
{
	m_rMainWnd.DownFreq(10);
}
//----------------------------------------------------------------------------
// 再生 → 再生周波数 → 0.1%上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp0_1FreqMenuSelected()
{
	m_rMainWnd.UpFreq(0.1);
}
//----------------------------------------------------------------------------
// 再生 → 再生周波数 → 1%上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp1FreqMenuSelected()
{
	m_rMainWnd.UpFreq(1);
}
//----------------------------------------------------------------------------
// 再生 → 再生周波数 → 2%上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp2FreqMenuSelected()
{
	m_rMainWnd.UpFreq(2);
}
//----------------------------------------------------------------------------
// 再生 → 再生周波数 → 3%上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp3FreqMenuSelected()
{
	m_rMainWnd.UpFreq(3);
}
//----------------------------------------------------------------------------
// 再生 → 再生周波数 → 5%上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp5FreqMenuSelected()
{
	m_rMainWnd.UpFreq(5);
}
//----------------------------------------------------------------------------
// 再生 → 再生周波数 → 10%上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp10FreqMenuSelected()
{
	m_rMainWnd.UpFreq(10);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → デフォルトに戻すメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnResetPitchMenuSelected()
{
	m_rMainWnd.ResetPitch();
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♭12メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchFlat12MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(-12.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♭11メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchFlat11MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(-11.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♭10メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchFlat10MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(-10.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♭9メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchFlat9MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(-9.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♭8メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchFlat8MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(-8.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♭7メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchFlat7MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(-7.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♭6メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchFlat6MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(-6.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♭5メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchFlat5MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(-5.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♭4メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchFlat4MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(-4.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♭3メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchFlat3MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(-3.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♭2メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchFlat2MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(-2.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♭1メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchFlat1MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(-1.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → 0メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchNaturalMenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(0.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♯1メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchSharp1MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(1.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♯2メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchSharp2MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(2.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♯3メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchSharp3MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(3.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♯4メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchSharp4MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(4.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♯5メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchSharp5MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(5.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♯6メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchSharp6MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(6.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♯7メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchSharp7MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(7.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♯8メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchSharp8MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(8.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♯9メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchSharp9MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(9.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♯10メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchSharp10MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(10.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♯11メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchSharp11MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(11.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 音程指定 → ♯12メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnSetPitchSharp12MenuSelected()
{
	m_rMainWnd.GetPitchLabel().SetPitch(12.0);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 半音下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown1PitchMenuSelected()
{
	m_rMainWnd.DownPitch(1);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 全音下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown2PitchMenuSelected()
{
	m_rMainWnd.DownPitch(2);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → １オクターブ下げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDown1OctavePitchMenuSelected()
{
	m_rMainWnd.DownPitch(12);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 半音上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp1PitchMenuSelected()
{
	m_rMainWnd.UpPitch(1);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → 全音上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp2PitchMenuSelected()
{
	m_rMainWnd.UpPitch(2);
}
//----------------------------------------------------------------------------
// 再生 → 音程 → １オクターブ上げるメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnUp1OctavePitchMenuSelected()
{
	m_rMainWnd.UpPitch(12);
}
//----------------------------------------------------------------------------
// 再生 → ノーマライズメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnNormalizeMenuSelected(bool checked)
{
	m_rMainWnd.SetNormalize(checked);
}
//----------------------------------------------------------------------------
// 再生 → ボーカルキャンセルメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnVocalCancelMenuSelected(bool checked)
{
	m_rMainWnd.SetVocalCancel(checked);
}
//----------------------------------------------------------------------------
// 再生 → 逆回転再生メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnReverseMenuSelected(bool checked)
{
	m_rMainWnd.SetReverse(checked);
}
//----------------------------------------------------------------------------
// 再生 → 古びたレコード再生メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnRecordMenuSelected(bool checked)
{
	CheckItem(ID_RECORD, !checked ? MF_CHECKED : MF_UNCHECKED);
	m_rMainWnd.SetRecord();
}
//----------------------------------------------------------------------------
// 再生 → エフェクト → 電池切れメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnLowBatteryMenuSelected(bool checked)
{
	m_rMainWnd.SetLowBattery(checked);
}
//----------------------------------------------------------------------------
// 再生 → エフェクト → 歌へたモードメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnNoSenseMenuSelected(bool checked)
{
	m_rMainWnd.SetNoSense(checked);
}
//----------------------------------------------------------------------------
// エフェクト → ベースの耳コピメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnBassCopyMenuSelected()
{
	BOOL bChecked = !IsItemChecked(ID_BASSCOPY);
	OnBassCopyMenuSelected(bChecked);
}
void CMenu_MainWnd::OnBassCopyMenuSelected(bool bChecked)
{
	if(bChecked) {
		m_rMainWnd.SetFreq(100.0);
		m_rMainWnd.GetPitchLabel().SetPitch(12.0);
		m_rMainWnd.GetPitchSlider().SetThumbPos((LONG)(12 * pow(10.0,
			m_rMainWnd.GetPitchSlider().GetDecimalDigit())), TRUE);
		m_rMainWnd.SetPitch(12.0);
		m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30,
						 -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
						 -30, -30, -30, -30);
	}
	else {
		m_rMainWnd.SetFreq(100.0);
		m_rMainWnd.GetPitchLabel().SetPitch(0.0);
		m_rMainWnd.GetPitchSlider().SetThumbPos(0L, TRUE);
		m_rMainWnd.SetPitch(0.0);
		OnEQFlatMenuSelected();
	}
	CheckItem(ID_BASSCOPY, bChecked ? MF_CHECKED : MF_UNCHECKED);
}
//----------------------------------------------------------------------------
// エフェクト → ドラム（ハイハット、シンバル）の耳コピメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnDrumsCopyMenuSelected()
{
	BOOL bChecked = !IsItemChecked(ID_CYMBALCOPY);
	OnDrumsCopyMenuSelected(bChecked);
}
void CMenu_MainWnd::OnDrumsCopyMenuSelected(bool bChecked)
{
	if(bChecked) {
		m_rMainWnd.SetFreq(100.0);
		m_rMainWnd.GetPitchLabel().SetPitch(0.0);
		m_rMainWnd.GetPitchSlider().SetThumbPos(0L, TRUE);
		m_rMainWnd.SetPitch(0.0);
		m_rMainWnd.SetEQ(-30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
						 -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
						 -30, -30, 0, 0, 0, 0, 0, 0, 0);
	}
	else {
		m_rMainWnd.SetFreq(100.0);
		m_rMainWnd.GetPitchLabel().SetPitch(0.0);
		m_rMainWnd.GetPitchSlider().SetThumbPos(0L, TRUE);
		m_rMainWnd.SetPitch(0.0);
		OnEQFlatMenuSelected();
	}
	CheckItem(ID_CYMBALCOPY, bChecked ? MF_CHECKED : MF_UNCHECKED);
}
//----------------------------------------------------------------------------
// 再生 → エフェクト → 聴覚トレーニングメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEarTrainingMenuSelected(bool checked)
{
	CheckItem(ID_EARTRAINING, !checked ? MF_CHECKED : MF_UNCHECKED);
	m_rMainWnd.SetEarTraining();
}
//----------------------------------------------------------------------------
// 再生 → モノラルメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnMonoralMenuSelected(bool checked)
{
	m_rMainWnd.SetMonoral(checked);
}
//----------------------------------------------------------------------------
// 再生 → 左のみ再生メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnOnlyLeftMenuSelected(bool checked)
{
	m_rMainWnd.SetOnlyLeft(checked);
}
//----------------------------------------------------------------------------
// 再生 → 右のみ再生メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnOnlyRightMenuSelected(bool checked)
{
	m_rMainWnd.SetOnlyRight(checked);
}
//----------------------------------------------------------------------------
// 再生 → 左右入れ替えメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnChangeLRMenuSelected(bool checked)
{
	m_rMainWnd.SetChangeLR(checked);
}
//----------------------------------------------------------------------------
// システム → エフェクト → リバーブ → デフォルトメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnReverbDefaultMenuSelected(bool checked)
{
	CheckItem(ID_REVERB_DEFAULT, checked ? MF_UNCHECKED : MF_CHECKED);
	SetReverb(0.0f, 0.0f, 1000.0f, 0.001f, ID_REVERB_DEFAULT);
}
//----------------------------------------------------------------------------
// システム → エフェクト → リバーブ → カスタマイズメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnReverbCustomizeMenuSelected(bool checked)
{
	CheckItem(ID_REVERB_CUSTOMIZE, checked ? MF_UNCHECKED : MF_CHECKED);
	if(!checked)
		SetReverb(0.0f, 0.0f, 1000.0f, 0.001f, ID_REVERB_CUSTOMIZE);
	else m_rMainWnd.ShowReverbCustomizeWnd();
}

//----------------------------------------------------------------------------
// システム → EQプリセット → FLATメニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQFlatMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 低音強調（超最強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQLowSuperMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, -30, -30, -30,
					 -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
					 -30, -30, -30, -30);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 低音強調（最強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQLowHighestMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, -15, -15, -15,
					 -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
					 -15, -15, -15, -15);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 低音強調（強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQLowHighMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -12, -12, -12,
					 -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
					 -12, -12, -12, -12);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 低音強調（中）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQLowMiddleMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, -9, -9, -9, -9,
					 -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 低音強調（弱）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQLowLowMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, -6, -6, -6, -6,
					 -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 低音強調（最弱）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQLowLowestMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3, -3, -3, -3,
					 -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 中音強調（超最強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQMiddleSuperMenuSelected()
{
	m_rMainWnd.SetEQ(-30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
					 -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, -30, -30, -30, -30,
					 -30, -30, -30, -30, -30);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 中音強調（最強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQMiddleHighestMenuSelected()
{
	m_rMainWnd.SetEQ(-15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
					 -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, -15, -15, -15, -15,
					 -15, -15, -15, -15, -15);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 中音強調（強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQMiddleHighMenuSelected()
{
	m_rMainWnd.SetEQ(-12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
					 -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -12, -12, -12, -12,
					 -12, -12, -12, -12, -12);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 中音強調（中）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQMiddleMiddleMenuSelected()
{
	m_rMainWnd.SetEQ(-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, 0, 0, 0,
					 0, 0, 0, 0, 0, 0, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 中音強調（弱）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQMiddleLowMenuSelected()
{
	m_rMainWnd.SetEQ(-6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 0, 0, 0,
					 0, 0, 0, 0, 0, 0, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 中音強調（最弱）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQMiddleLowestMenuSelected()
{
	m_rMainWnd.SetEQ(-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 0, 0,
					 0, 0, 0, 0, 0, 0, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 高音強調（超最強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQHighSuperMenuSelected()
{
	m_rMainWnd.SetEQ(-30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
					 -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, 0, 0,
					 0, 0, 0, 0, 0, 0, 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 高音強調（最強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQHighHighestMenuSelected()
{
	m_rMainWnd.SetEQ(-15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
					 -15, -15, -15, -15, -15, -15, -15, -15, -15, -15, 0, 0,
					 0, 0, 0, 0, 0, 0, 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 高音強調（強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQHighHighMenuSelected()
{
	m_rMainWnd.SetEQ(-12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
					 -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, 0, 0,
					 0, 0, 0, 0, 0, 0, 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 高音強調（中）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQHighMiddleMenuSelected()
{
	m_rMainWnd.SetEQ(-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
					 -9, -9, -9, -9, -9, -9, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 高音強調（弱）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQHighLowMenuSelected()
{
	m_rMainWnd.SetEQ(-6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
					 -6, -6, -6, -6, -6, -6, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 高音強調（最弱）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQHighLowestMenuSelected()
{
	m_rMainWnd.SetEQ(-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
					 -3, -3, -3, -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 低音カット（超最強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQLowCutSuperMenuSelected()
{
	m_rMainWnd.SetEQ(-30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
					 -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 低音カット（最強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQLowCutHighestMenuSelected()
{
	m_rMainWnd.SetEQ(-15, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
					 -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 低音カット（強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQLowCutHighMenuSelected()
{
	m_rMainWnd.SetEQ(-12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
					 -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 低音カット（中）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQLowCutMiddleMenuSelected()
{
	m_rMainWnd.SetEQ(-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
					 -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 低音カット（弱）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQLowCutLowMenuSelected()
{
	m_rMainWnd.SetEQ(-6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
					 -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 低音カット（最弱）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQLowCutLowestMenuSelected()
{
	m_rMainWnd.SetEQ(-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,
					 -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 中音カット（超最強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQMiddleCutSuperMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, -30, -30, -30,
					 -30, -30, -30, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 中音カット（最強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQMiddleCutHighestMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, -15, -15, -15,
					 -15, -15, -15, -15, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 中音カット（強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQMiddleCutHighMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -12, -12, -12,
					 -12, -12, -12, -12, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 中音カット（中）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQMiddleCutMiddleMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, -9, -9, -9, -9,
					 -9, -9, -9, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 中音カット（弱）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQMiddleCutLowMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, -6, -6, -6, -6,
					 -6, -6, -6, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 中音カット（最弱）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQMiddleCutLowestMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3, -3, -3, -3,
					 -3, -3, -3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 高音カット（超最強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQHighCutSuperMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					 0, 0, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 高音カット（最強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQHighCutHighestMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					 0, 0, -15, -15, -15, -15, -15, -15, -15, -15, -15, -15);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 高音カット（強）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQHighCutHighMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					 0, 0, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 高音カット（中）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQHighCutMiddleMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					 0, 0, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 高音カット（弱）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQHighCutLowMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					 0, 0, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6);
}
//----------------------------------------------------------------------------
// システム → EQプリセット → 高音カット（最弱）メニューが選択された
//----------------------------------------------------------------------------
void CMenu_MainWnd::OnEQHighCutLowestMenuSelected()
{
	m_rMainWnd.SetEQ(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
					 0, 0, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3);
}
//----------------------------------------------------------------------------
// メニューの項目のチェック状態を設定
//----------------------------------------------------------------------------
void CMenu_MainWnd::CheckItem(UINT uIDCheckItem, UINT uCheck)
{
	auto it = m_actionMap.find(uIDCheckItem);
	assert(it != m_actionMap.end());
	if(it == m_actionMap.end()) {
		return;
	}
	it->second->setChecked(uCheck == MF_CHECKED);
}
//----------------------------------------------------------------------------
// メニューの項目のチェック状態を取得
//----------------------------------------------------------------------------
BOOL CMenu_MainWnd::IsItemChecked(UINT uID)
{
	auto it = m_actionMap.find(uID);
	assert(it != m_actionMap.end());
	if(it == m_actionMap.end()) {
		return FALSE;
	}
	return it->second->isChecked() ? TRUE : FALSE;
}
//----------------------------------------------------------------------------
// メニューの項目の有効/無効を設定
//----------------------------------------------------------------------------
void CMenu_MainWnd::EnableItem(UINT uIDEnableItem, UINT uEnable)
{
	auto it = m_actionMap.find(uIDEnableItem);
	assert(it != m_actionMap.end());
	if(it == m_actionMap.end()) {
		return;
	}
	it->second->setEnabled(uEnable == MFS_ENABLED);
}
//----------------------------------------------------------------------------
// メニューの項目IDとQActionの対応付け
//----------------------------------------------------------------------------
void CMenu_MainWnd::CreateActionMap()
{
	m_actionMap = std::unordered_map<UINT, QAction*>{
		{ID_SPEED, m_rMainWnd.actionSpeedVisible},
		{ID_FREQ, m_rMainWnd.actionFreqVisible},
		{ID_PITCH, m_rMainWnd.actionPitchVisible},
		{ID_VOLUME, m_rMainWnd.actionVolumeVisible},
		{ID_PAN, m_rMainWnd.actionPanVisible},
		{ID_EQ, m_rMainWnd.actionEQVisible},
		{ID_HEAD, m_rMainWnd.actionHead},
		{ID_PREV, m_rMainWnd.actionPrevious},
		{ID_NEXT, m_rMainWnd.actionNext},
		{ID_REWIND, m_rMainWnd.actionRewind},
		{ID_FORWARD, m_rMainWnd.actionForward},
		{ID_SLOOP, m_rMainWnd.actionSingleLoop},
		{ID_ALOOP, m_rMainWnd.actionAllLoop},
		{ID_RANDOM, m_rMainWnd.actionRandomPlay},
		{ID_CONTINUE, m_rMainWnd.actionContinuousPlay},
		{ID_ABLOOP_A_SETTING, m_rMainWnd.actionABLoopAPosSetting},
		{ID_ABLOOP_B_SETTING, m_rMainWnd.actionABLoopBPosSetting},
		{ID_MARKERPLAY, m_rMainWnd.actionMarkerPlay},
		{ID_ADDMARKER, m_rMainWnd.actionAddMarker},
		{ID_DELETEMARKER, m_rMainWnd.actionDeleteMarker},
		{ID_COUNTLOOP, m_rMainWnd.actionCountLoop},
		{ID_INSTANTLOOP, m_rMainWnd.actionInstantLoop},
		{ID_SETPOSITIONAUTO, m_rMainWnd.actionSetMarkerPositionAuto},
		{ID_SPEEDDEC_0, m_rMainWnd.actionSpeedDigit0},
		{ID_SPEEDDEC_1, m_rMainWnd.actionSpeedDigit1},
		{ID_SPEEDDEC_2, m_rMainWnd.actionSpeedDigit2},
		{ID_FREQDEC_0, m_rMainWnd.actionFreqDigit0},
		{ID_FREQDEC_1, m_rMainWnd.actionFreqDigit1},
		{ID_FREQDEC_2, m_rMainWnd.actionFreqDigit2},
		{ID_PITCHDEC_0, m_rMainWnd.actionPitchDigit0},
		{ID_PITCHDEC_1, m_rMainWnd.actionPitchDigit1},
		{ID_PITCHDEC_2, m_rMainWnd.actionPitchDigit2},
		{ID_REVERB_DEFAULT, m_rMainWnd.actionReverbDefault},
		{ID_REVERB_CUSTOMIZE, m_rMainWnd.actionReverbCustomize},
		{ID_RECORDNOISE, m_rMainWnd.actionRecordNoise},
		{ID_WAVE, m_rMainWnd.actionWave},
		{ID_NORMALIZE, m_rMainWnd.actionNormalize},
		{ID_VOCALCANCEL, m_rMainWnd.actionVocalCancel},
		{ID_REVERSE, m_rMainWnd.actionReversePlay},
		{ID_RECORD, m_rMainWnd.actionOldRecordPlay},
		{ID_LOWBATTERY, m_rMainWnd.actionLowBattery},
		{ID_NOSENSE, m_rMainWnd.actionNoSense},
		{ID_BASSCOPY, m_rMainWnd.actionBassCopy},
		{ID_CYMBALCOPY, m_rMainWnd.actionCymbalCopy},
		{ID_EARTRAINING, m_rMainWnd.actionEarTraining},
		{ID_MONORAL, m_rMainWnd.actionMonoral},
		{ID_ONLYLEFT, m_rMainWnd.actionOnlyLeft},
		{ID_ONLYRIGHT, m_rMainWnd.actionOnlyRight},
		{ID_CHANGELR, m_rMainWnd.actionChangeLR},
		{ID_RECOVERSPEEDVISIBLE, m_rMainWnd.actionRecoverSpeedVisible},
		{ID_RECOVERFREQVISIBLE, m_rMainWnd.actionRecoverFreqVisible},
		{ID_RECOVERPITCHVISIBLE, m_rMainWnd.actionRecoverPitchVisible},
		{ID_RECOVERVOLUMEVISIBLE, m_rMainWnd.actionRecoverVolumeVisible},
		{ID_RECOVERPANVISIBLE, m_rMainWnd.actionRecoverPanVisible},
		{ID_RECOVEREQVISIBLE, m_rMainWnd.actionRecoverEQVisible},
		{ID_RECOVERSPEED, m_rMainWnd.actionRecoverSpeed},
		{ID_RECOVERFREQ, m_rMainWnd.actionRecoverFreq},
		{ID_RECOVERPITCH, m_rMainWnd.actionRecoverPitch},
		{ID_RECOVERVOLUME, m_rMainWnd.actionRecoverVolume},
		{ID_RECOVERPAN, m_rMainWnd.actionRecoverPan},
		{ID_RECOVEREQ, m_rMainWnd.actionRecoverEQ},
		{ID_RECOVERSLOOP, m_rMainWnd.actionRecoverPlayModeSingleLoop},
		{ID_RECOVERALOOP, m_rMainWnd.actionRecoverPlayModeAllLoop},
		{ID_RECOVERRANDOM, m_rMainWnd.actionRecoverPlayModeRandom},
		{ID_RECOVERCONTINUE, m_rMainWnd.actionRecoverPlayModeContinuous},
		{ID_RECOVERINSTANTLOOP, m_rMainWnd.actionRecoverPlayModeInstantLoop},
		{ID_RECOVERSETPOSITIONAUTO,
		 m_rMainWnd.actionRecoverPlayModeSetMarkerPositionAuto},
		{ID_RECOVERREVERSE, m_rMainWnd.actionRecoverPlayModeReverse},
		{ID_RECOVERRECORD, m_rMainWnd.actionRecoverPlayModeRecord},
	};
}
//----------------------------------------------------------------------------
// 排他的にチェックするアイテムのグループ化
//----------------------------------------------------------------------------
void CMenu_MainWnd::CreateActionGroups()
{
	// Speed - Decimal digit
	auto speed_digit_group = new QActionGroup(&m_rMainWnd);
	for (auto action : {m_rMainWnd.actionSpeedDigit0,
											m_rMainWnd.actionSpeedDigit1,
											m_rMainWnd.actionSpeedDigit2}) {
		speed_digit_group->addAction(action);
	}
	// Frequency - Decimal digit
	auto freq_digit_group = new QActionGroup(&m_rMainWnd);
	for (auto action : {m_rMainWnd.actionFreqDigit0,
											m_rMainWnd.actionFreqDigit1,
											m_rMainWnd.actionFreqDigit2}) {
		freq_digit_group->addAction(action);
	}
	// Pitch - Decimal digit
	auto pitch_digit_group = new QActionGroup(&m_rMainWnd);
	for (auto action : {m_rMainWnd.actionPitchDigit0,
											m_rMainWnd.actionPitchDigit1,
											m_rMainWnd.actionPitchDigit2}) {
		pitch_digit_group->addAction(action);
	}
}
//----------------------------------------------------------------------------
// シグナル&スロットの設定
//----------------------------------------------------------------------------
void CMenu_MainWnd::CreateConnections()
{
	// View
	connect(m_rMainWnd.actionSpeedVisible, &QAction::toggled,
					this, &CMenu_MainWnd::OnSpeedMenuSelected);
	connect(m_rMainWnd.actionFreqVisible, &QAction::toggled,
					this, &CMenu_MainWnd::OnFreqMenuSelected);
	connect(m_rMainWnd.actionPitchVisible, &QAction::toggled,
					this, &CMenu_MainWnd::OnPitchMenuSelected);
	connect(m_rMainWnd.actionVolumeVisible, &QAction::toggled,
					this, &CMenu_MainWnd::OnVolumeMenuSelected);
	connect(m_rMainWnd.actionPanVisible, &QAction::toggled,
					this, &CMenu_MainWnd::OnPanMenuSelected);
	connect(m_rMainWnd.actionEQVisible, &QAction::toggled,
					this, &CMenu_MainWnd::OnEQMenuSelected);
	// Play
	connect(m_rMainWnd.actionPlayPlayPause, &QAction::triggered,
					this, &CMenu_MainWnd::OnPauseMenuSelected);
	connect(m_rMainWnd.actionPlayStop, &QAction::triggered,
					this, &CMenu_MainWnd::OnStopMenuSelected);
	connect(m_rMainWnd.actionHead, &QAction::triggered,
					this, &CMenu_MainWnd::OnHeadMenuSelected);
	connect(m_rMainWnd.actionPrevious, &QAction::triggered,
					this, &CMenu_MainWnd::OnPreviousMenuSelected);
	connect(m_rMainWnd.actionNext, &QAction::triggered,
					this, &CMenu_MainWnd::OnNextMenuSelected);
	connect(m_rMainWnd.actionRewind, &QAction::triggered,
					this, &CMenu_MainWnd::OnRewindMenuSelected);
	connect(m_rMainWnd.actionForward, &QAction::triggered,
					this, &CMenu_MainWnd::OnForwardMenuSelected);
	connect(m_rMainWnd.actionRewind1, &QAction::triggered,
					this, &CMenu_MainWnd::OnReturn1SecMenuSelected);
	connect(m_rMainWnd.actionRewind2, &QAction::triggered,
					this, &CMenu_MainWnd::OnReturn2SecMenuSelected);
	connect(m_rMainWnd.actionRewind3, &QAction::triggered,
					this, &CMenu_MainWnd::OnReturn3SecMenuSelected);
	connect(m_rMainWnd.actionRewind5, &QAction::triggered,
					this, &CMenu_MainWnd::OnReturn5SecMenuSelected);
	connect(m_rMainWnd.actionRewind10, &QAction::triggered,
					this, &CMenu_MainWnd::OnReturn10SecMenuSelected);
	connect(m_rMainWnd.actionForward1, &QAction::triggered,
					this, &CMenu_MainWnd::OnForward1SecMenuSelected);
	connect(m_rMainWnd.actionForward2, &QAction::triggered,
					this, &CMenu_MainWnd::OnForward2SecMenuSelected);
	connect(m_rMainWnd.actionForward3, &QAction::triggered,
					this, &CMenu_MainWnd::OnForward3SecMenuSelected);
	connect(m_rMainWnd.actionForward5, &QAction::triggered,
					this, &CMenu_MainWnd::OnForward5SecMenuSelected);
	connect(m_rMainWnd.actionForward10, &QAction::triggered,
					this, &CMenu_MainWnd::OnForward10SecMenuSelected);
	connect(m_rMainWnd.actionSingleLoop, &QAction::triggered,
					this, &CMenu_MainWnd::OnSingleLoopMenuSelected);
	connect(m_rMainWnd.actionAllLoop, &QAction::toggled,
					this, &CMenu_MainWnd::OnAllLoopMenuSelected);
	connect(m_rMainWnd.actionRandomPlay, &QAction::toggled,
					this, &CMenu_MainWnd::OnRandomMenuSelected);
	connect(m_rMainWnd.actionContinuousPlay, &QAction::toggled,
					this, &CMenu_MainWnd::OnContinueMenuSelected);
	connect(m_rMainWnd.actionSetABLoopA, &QAction::triggered,
					this, &CMenu_MainWnd::OnABLoopAMenuSelected);
	connect(m_rMainWnd.actionSetABLoopB, &QAction::triggered,
					this, &CMenu_MainWnd::OnABLoopBMenuSelected);
	connect(m_rMainWnd.actionABLoopAPosSetting, &QAction::triggered,
					this, &CMenu_MainWnd::OnABLoopASettingMenuSelected);
	connect(m_rMainWnd.actionABLoopBPosSetting, &QAction::triggered,
					this, &CMenu_MainWnd::OnABLoopBSettingMenuSelected);
	connect(m_rMainWnd.actionMarkerPlay, &QAction::triggered,
					this, &CMenu_MainWnd::OnMarkerPlayMenuSelected);
	connect(m_rMainWnd.actionAddMarker, &QAction::triggered,
					this, &CMenu_MainWnd::OnAddMarkerMenuSelected);
	connect(m_rMainWnd.actionDeleteMarker, &QAction::triggered,
					this, &CMenu_MainWnd::OnDeleteMarkerMenuSelected);
	connect(m_rMainWnd.actionCountLoop, &QAction::triggered,
					this, &CMenu_MainWnd::OnCountLoopMenuSelected);
	connect(m_rMainWnd.actionInstantLoop, &QAction::triggered,
					this, &CMenu_MainWnd::OnInstantLoopMenuSelected);
	connect(m_rMainWnd.actionSetMarkerPositionAuto, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPositionAutoMenuSelected);
	// Effect
	connect(m_rMainWnd.actionReverbDefault, &QAction::triggered,
					this, &CMenu_MainWnd::OnReverbDefaultMenuSelected);
	connect(m_rMainWnd.actionReverbCustomize, &QAction::triggered,
					this, &CMenu_MainWnd::OnReverbCustomizeMenuSelected);
	connect(m_rMainWnd.actionRecordNoise, &QAction::triggered,
					this, &CMenu_MainWnd::OnRecordNoiseMenuSelected);
	connect(m_rMainWnd.actionWave, &QAction::triggered,
					this, &CMenu_MainWnd::OnWaveMenuSelected);
	connect(m_rMainWnd.actionNormalize, &QAction::triggered,
					this, &CMenu_MainWnd::OnNormalizeMenuSelected);
	connect(m_rMainWnd.actionVocalCancel, &QAction::triggered,
					this, &CMenu_MainWnd::OnVocalCancelMenuSelected);
	connect(m_rMainWnd.actionReversePlay, &QAction::triggered,
					this, &CMenu_MainWnd::OnReverseMenuSelected);
	connect(m_rMainWnd.actionOldRecordPlay, &QAction::triggered,
					this, &CMenu_MainWnd::OnRecordMenuSelected);
	connect(m_rMainWnd.actionLowBattery, &QAction::triggered,
					this, &CMenu_MainWnd::OnLowBatteryMenuSelected);
	connect(m_rMainWnd.actionNoSense, &QAction::triggered,
					this, &CMenu_MainWnd::OnNoSenseMenuSelected);
	connect(m_rMainWnd.actionBassCopy, &QAction::triggered,
					this,
					static_cast<void (CMenu_MainWnd::*)(bool)>(
							&CMenu_MainWnd::OnBassCopyMenuSelected));
	connect(m_rMainWnd.actionCymbalCopy, &QAction::triggered,
					this,
					static_cast<void (CMenu_MainWnd::*)(bool)>(
							&CMenu_MainWnd::OnDrumsCopyMenuSelected));
	connect(m_rMainWnd.actionEarTraining, &QAction::triggered,
					this, &CMenu_MainWnd::OnEarTrainingMenuSelected);
	connect(m_rMainWnd.actionMonoral, &QAction::triggered,
					this, &CMenu_MainWnd::OnMonoralMenuSelected);
	connect(m_rMainWnd.actionOnlyLeft, &QAction::triggered,
					this, &CMenu_MainWnd::OnOnlyLeftMenuSelected);
	connect(m_rMainWnd.actionOnlyRight, &QAction::triggered,
					this, &CMenu_MainWnd::OnOnlyRightMenuSelected);
	connect(m_rMainWnd.actionChangeLR, &QAction::triggered,
					this, &CMenu_MainWnd::OnChangeLRMenuSelected);
	// Effect - EQ preset
	connect(m_rMainWnd.actionEQPresetFlat, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQFlatMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostLowUltraStrong, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQLowSuperMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostLowStrongest, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQLowHighestMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostLowStrong, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQLowHighMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostLowMiddle, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQLowMiddleMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostLowWeak, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQLowLowMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostLowWeakest, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQLowLowestMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostMiddleUltraStrong, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQMiddleSuperMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostMiddleStrongest, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQMiddleHighestMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostMiddleStrong, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQMiddleHighMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostMiddleMiddle, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQMiddleMiddleMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostMiddleWeak, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQMiddleLowMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostMiddleWeakest, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQMiddleLowestMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostHighUltraStrong, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQHighSuperMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostHighStrongest, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQHighHighestMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostHighStrong, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQHighHighMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostHighMiddle, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQHighMiddleMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostHighWeak, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQHighLowMenuSelected);
	connect(m_rMainWnd.actionEQPresetBoostHighWeakest, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQHighLowestMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutLowUltraStrong, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQLowCutSuperMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutLowStrongest, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQLowCutHighestMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutLowStrong, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQLowCutHighMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutLowMiddle, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQLowCutMiddleMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutLowWeak, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQLowCutLowMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutLowWeakest, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQLowCutLowestMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutMiddleUltraStrong, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQMiddleCutSuperMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutMiddleStrongest, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQMiddleCutHighestMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutMiddleStrong, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQMiddleCutHighMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutMiddleMiddle, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQMiddleCutMiddleMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutMiddleWeak, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQMiddleCutLowMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutMiddleWeakest, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQMiddleCutLowestMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutHighUltraStrong, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQHighCutSuperMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutHighStrongest, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQHighCutHighestMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutHighStrong, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQHighCutHighMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutHighMiddle, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQHighCutMiddleMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutHighWeak, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQHighCutLowMenuSelected);
	connect(m_rMainWnd.actionEQPresetCutHighWeakest, &QAction::triggered,
					this, &CMenu_MainWnd::OnEQHighCutLowestMenuSelected);
	// Effect - Speed
	connect(m_rMainWnd.actionResetSpeed, &QAction::triggered,
					this, &CMenu_MainWnd::OnResetSpeedMenuSelected);
	connect(m_rMainWnd.actionSetSpeed50, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed50MenuSelected);
	connect(m_rMainWnd.actionSetSpeed60, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed60MenuSelected);
	connect(m_rMainWnd.actionSetSpeed70, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed70MenuSelected);
	connect(m_rMainWnd.actionSetSpeed80, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed80MenuSelected);
	connect(m_rMainWnd.actionSetSpeed90, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed90MenuSelected);
	connect(m_rMainWnd.actionSetSpeed100, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed100MenuSelected);
	connect(m_rMainWnd.actionSetSpeed110, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed110MenuSelected);
	connect(m_rMainWnd.actionSetSpeed120, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed120MenuSelected);
	connect(m_rMainWnd.actionSetSpeed130, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed130MenuSelected);
	connect(m_rMainWnd.actionSetSpeed140, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed140MenuSelected);
	connect(m_rMainWnd.actionSetSpeed150, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed150MenuSelected);
	connect(m_rMainWnd.actionSetSpeed160, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed160MenuSelected);
	connect(m_rMainWnd.actionSetSpeed170, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed170MenuSelected);
	connect(m_rMainWnd.actionSetSpeed180, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed180MenuSelected);
	connect(m_rMainWnd.actionSetSpeed190, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed190MenuSelected);
	connect(m_rMainWnd.actionSetSpeed200, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed200MenuSelected);
	connect(m_rMainWnd.actionSetSpeed250, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed250MenuSelected);
	connect(m_rMainWnd.actionSetSpeed300, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed300MenuSelected);
	connect(m_rMainWnd.actionSetSpeed350, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed350MenuSelected);
	connect(m_rMainWnd.actionSetSpeed400, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetSpeed400MenuSelected);
	connect(m_rMainWnd.actionSpeedDown01, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown0_1SpeedMenuSelected);
	connect(m_rMainWnd.actionSpeedDown1, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown1SpeedMenuSelected);
	connect(m_rMainWnd.actionSpeedDown2, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown2SpeedMenuSelected);
	connect(m_rMainWnd.actionSpeedDown3, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown3SpeedMenuSelected);
	connect(m_rMainWnd.actionSpeedDown5, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown5SpeedMenuSelected);
	connect(m_rMainWnd.actionSpeedDown10, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown10SpeedMenuSelected);
	connect(m_rMainWnd.actionSpeedUp01, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp0_1SpeedMenuSelected);
	connect(m_rMainWnd.actionSpeedUp1, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp1SpeedMenuSelected);
	connect(m_rMainWnd.actionSpeedUp2, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp2SpeedMenuSelected);
	connect(m_rMainWnd.actionSpeedUp3, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp3SpeedMenuSelected);
	connect(m_rMainWnd.actionSpeedUp5, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp5SpeedMenuSelected);
	connect(m_rMainWnd.actionSpeedUp10, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp10SpeedMenuSelected);
	// Effect - Speed - Decimal digit
	connect(m_rMainWnd.actionSpeedDigit0, &QAction::toggled,
					[&] (bool checked) {
						if (checked) { emit OnSetSpeedDecimal0MenuSelected(); }
					});
	connect(m_rMainWnd.actionSpeedDigit1, &QAction::toggled,
					[&] (bool checked) {
						if (checked) { emit OnSetSpeedDecimal1MenuSelected(); }
					});
	connect(m_rMainWnd.actionSpeedDigit2, &QAction::toggled,
					[&] (bool checked) {
						if (checked) { emit OnSetSpeedDecimal2MenuSelected(); }
					});
	// Effect - Frequency
	connect(m_rMainWnd.actionResetFreq, &QAction::triggered,
					this, &CMenu_MainWnd::OnResetFreqMenuSelected);
	connect(m_rMainWnd.actionSetFreq50, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq50MenuSelected);
	connect(m_rMainWnd.actionSetFreq60, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq60MenuSelected);
	connect(m_rMainWnd.actionSetFreq70, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq70MenuSelected);
	connect(m_rMainWnd.actionSetFreq80, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq80MenuSelected);
	connect(m_rMainWnd.actionSetFreq90, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq90MenuSelected);
	connect(m_rMainWnd.actionSetFreq100, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq100MenuSelected);
	connect(m_rMainWnd.actionSetFreq110, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq110MenuSelected);
	connect(m_rMainWnd.actionSetFreq120, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq120MenuSelected);
	connect(m_rMainWnd.actionSetFreq130, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq130MenuSelected);
	connect(m_rMainWnd.actionSetFreq140, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq140MenuSelected);
	connect(m_rMainWnd.actionSetFreq150, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq150MenuSelected);
	connect(m_rMainWnd.actionSetFreq160, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq160MenuSelected);
	connect(m_rMainWnd.actionSetFreq170, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq170MenuSelected);
	connect(m_rMainWnd.actionSetFreq180, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq180MenuSelected);
	connect(m_rMainWnd.actionSetFreq190, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq190MenuSelected);
	connect(m_rMainWnd.actionSetFreq200, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq200MenuSelected);
	connect(m_rMainWnd.actionSetFreq250, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq250MenuSelected);
	connect(m_rMainWnd.actionSetFreq300, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq300MenuSelected);
	connect(m_rMainWnd.actionSetFreq350, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq350MenuSelected);
	connect(m_rMainWnd.actionSetFreq400, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetFreq400MenuSelected);
	connect(m_rMainWnd.actionFreqDown01, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown0_1FreqMenuSelected);
	connect(m_rMainWnd.actionFreqDown1, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown1FreqMenuSelected);
	connect(m_rMainWnd.actionFreqDown2, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown2FreqMenuSelected);
	connect(m_rMainWnd.actionFreqDown3, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown3FreqMenuSelected);
	connect(m_rMainWnd.actionFreqDown5, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown5FreqMenuSelected);
	connect(m_rMainWnd.actionFreqDown10, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown10FreqMenuSelected);
	connect(m_rMainWnd.actionFreqUp01, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp0_1FreqMenuSelected);
	connect(m_rMainWnd.actionFreqUp1, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp1FreqMenuSelected);
	connect(m_rMainWnd.actionFreqUp2, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp2FreqMenuSelected);
	connect(m_rMainWnd.actionFreqUp3, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp3FreqMenuSelected);
	connect(m_rMainWnd.actionFreqUp5, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp5FreqMenuSelected);
	connect(m_rMainWnd.actionFreqUp10, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp10FreqMenuSelected);
	// Effecgt - Frequency - Decimal digit
	connect(m_rMainWnd.actionFreqDigit0, &QAction::toggled,
					[&] (bool checked) {
						if (checked) { emit OnSetFreqDecimal0MenuSelected(); }
					});
	connect(m_rMainWnd.actionFreqDigit1, &QAction::toggled,
					[&] (bool checked) {
						if (checked) { emit OnSetFreqDecimal1MenuSelected(); }
					});
	connect(m_rMainWnd.actionFreqDigit2, &QAction::toggled,
					[&] (bool checked) {
						if (checked) { emit OnSetFreqDecimal2MenuSelected(); }
					});
	// Effect - Pitch
	connect(m_rMainWnd.actionResetPitch, &QAction::triggered,
					this, &CMenu_MainWnd::OnResetPitchMenuSelected);
	connect(m_rMainWnd.actionSetPitchFlat12, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchFlat12MenuSelected);
	connect(m_rMainWnd.actionSetPitchFlat11, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchFlat11MenuSelected);
	connect(m_rMainWnd.actionSetPitchFlat10, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchFlat10MenuSelected);
	connect(m_rMainWnd.actionSetPitchFlat9, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchFlat9MenuSelected);
	connect(m_rMainWnd.actionSetPitchFlat8, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchFlat8MenuSelected);
	connect(m_rMainWnd.actionSetPitchFlat7, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchFlat7MenuSelected);
	connect(m_rMainWnd.actionSetPitchFlat6, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchFlat6MenuSelected);
	connect(m_rMainWnd.actionSetPitchFlat5, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchFlat5MenuSelected);
	connect(m_rMainWnd.actionSetPitchFlat4, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchFlat4MenuSelected);
	connect(m_rMainWnd.actionSetPitchFlat3, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchFlat3MenuSelected);
	connect(m_rMainWnd.actionSetPitchFlat2, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchFlat2MenuSelected);
	connect(m_rMainWnd.actionSetPitchFlat1, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchFlat1MenuSelected);
	connect(m_rMainWnd.actionSetPitch0, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchNaturalMenuSelected);
	connect(m_rMainWnd.actionSetPitchSharp1, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchSharp1MenuSelected);
	connect(m_rMainWnd.actionSetPitchSharp2, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchSharp2MenuSelected);
	connect(m_rMainWnd.actionSetPitchSharp3, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchSharp3MenuSelected);
	connect(m_rMainWnd.actionSetPitchSharp4, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchSharp4MenuSelected);
	connect(m_rMainWnd.actionSetPitchSharp5, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchSharp5MenuSelected);
	connect(m_rMainWnd.actionSetPitchSharp6, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchSharp6MenuSelected);
	connect(m_rMainWnd.actionSetPitchSharp7, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchSharp7MenuSelected);
	connect(m_rMainWnd.actionSetPitchSharp8, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchSharp8MenuSelected);
	connect(m_rMainWnd.actionSetPitchSharp9, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchSharp9MenuSelected);
	connect(m_rMainWnd.actionSetPitchSharp10, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchSharp10MenuSelected);
	connect(m_rMainWnd.actionSetPitchSharp11, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchSharp11MenuSelected);
	connect(m_rMainWnd.actionSetPitchSharp12, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetPitchSharp12MenuSelected);
	connect(m_rMainWnd.actionPitchFlat, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown1PitchMenuSelected);
	connect(m_rMainWnd.actionPitchDoubleFlat, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown2PitchMenuSelected);
	connect(m_rMainWnd.actionPitchDown1Octave, &QAction::triggered,
					this, &CMenu_MainWnd::OnDown1OctavePitchMenuSelected);
	connect(m_rMainWnd.actionPitchSharp, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp1PitchMenuSelected);
	connect(m_rMainWnd.actionPitchDoubleSharp, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp2PitchMenuSelected);
	connect(m_rMainWnd.actionPitchUp1Octave, &QAction::triggered,
					this, &CMenu_MainWnd::OnUp1OctavePitchMenuSelected);
	// Effecgt - Pitch - Decimal digit
	connect(m_rMainWnd.actionPitchDigit0, &QAction::toggled,
					[&] (bool checked) {
						if (checked) { emit OnSetPitchDecimal0MenuSelected(); }
					});
	connect(m_rMainWnd.actionPitchDigit1, &QAction::toggled,
					[&] (bool checked) {
						if (checked) { emit OnSetPitchDecimal1MenuSelected(); }
					});
	connect(m_rMainWnd.actionPitchDigit2, &QAction::toggled,
					[&] (bool checked) {
						if (checked) { emit OnSetPitchDecimal2MenuSelected(); }
					});
	// Effect - Volume
	connect(m_rMainWnd.actionResetVolume, &QAction::triggered,
					this, &CMenu_MainWnd::OnResetVolumeMenuSelected);
	connect(m_rMainWnd.actionSetVolume0, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetVolume0MenuSelected);
	connect(m_rMainWnd.actionSetVolume10, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetVolume10MenuSelected);
	connect(m_rMainWnd.actionSetVolume20, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetVolume20MenuSelected);
	connect(m_rMainWnd.actionSetVolume30, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetVolume30MenuSelected);
	connect(m_rMainWnd.actionSetVolume40, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetVolume40MenuSelected);
	connect(m_rMainWnd.actionSetVolume50, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetVolume50MenuSelected);
	connect(m_rMainWnd.actionSetVolume60, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetVolume60MenuSelected);
	connect(m_rMainWnd.actionSetVolume70, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetVolume70MenuSelected);
	connect(m_rMainWnd.actionSetVolume80, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetVolume80MenuSelected);
	connect(m_rMainWnd.actionSetVolume90, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetVolume90MenuSelected);
	connect(m_rMainWnd.actionSetVolume100, &QAction::triggered,
					this, &CMenu_MainWnd::OnSetVolume100MenuSelected);
}
//----------------------------------------------------------------------------
